<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Panel de Votaciones - Inicio</title>
  <link rel="stylesheet" href="/dashboard.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-dI+X7r1d//p0CQpZK0s8AjtKoaVHgMHqYjgJv1nVbWcv16O3Qe9n3VWeNseyX2VINNodZ4Z1GDZCBo2eG1NsXA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    :root {
      --primary: <%= theme.primary %>;
      --secondary: <%= theme.secondary %>;
      --topbar: <%= theme.topbar %>;
      --accent: <%= theme.accent %>;
    }
  </style>
</head>
<body>
  <%- include('partials/topbar', { backend: backend }) %>
  <div class="dashboard">
    <div class="modules-grid">
      <div class="module">
        <h2><i class="fa-solid fa-square-poll-vertical"></i><span>Votaciones</span><span id="votacionesCount" class="badge"></span></h2>
        <div id="votacionesList" class="items"></div>
      </div>
        <div id="asistenciasModule" class="module clickable">
          <h2><i class="fa-regular fa-calendar-check"></i><span>Asistencias</span><span id="asistenciaCount" class="badge"></span></h2>
          <div id="asistenciasList" class="items"></div>
        </div>
      <div id="adminModule" class="module" style="display:none;">
        <h2>Administración</h2>
        <ul>
          <li>Ajustes</li>
          <li>Gestión de usuarios</li>
        </ul>
      </div>
    </div>
    </div>
    <div id="tasksIcon" class="tasks-icon">
      <img src="/pending-tasks.svg" alt="Tareas pendientes" />
      <span id="taskCount" class="task-badge"></span>
    </div>
    <div id="tasksPopup" class="tasks-popup hidden">
      <h3>Tareas pendientes</h3>
      <ul id="taskList"></ul>
    </div>
    <script>
    const backend = '<%= backend %>';
    const token = localStorage.getItem('token');
    if (!token) { window.location.href = '/'; }
    </script>
    <script src="/topbar.js"></script>
    <script>
    async function fetchJSON(url) {
      try {
        const resp = await fetch(url, { headers: { 'Authorization': 'Bearer ' + token } });
        if (!resp.ok) return null;
        return await resp.json();
      } catch (err) {
        return null;
      }
    }

    function formatTimeLeft(ts) {
      const diff = ts * 1000 - Date.now();
      if (diff <= 0) return 'Finalizado';
      const secs = Math.floor(diff / 1000) % 60;
      const mins = Math.floor(diff / 60000) % 60;
      const hrs = Math.floor(diff / 3600000);
      return (hrs > 0 ? hrs + 'h ' : '') + (mins > 0 || hrs > 0 ? mins + 'm ' : '') + secs + 's';
    }

    function createCountdown(el, ts) {
      function update() {
        el.textContent = formatTimeLeft(ts);
      }
      update();
      return setInterval(update, 1000);
    }

    function renderSubcards(list, container, isAsistencia) {
      container.innerHTML = '';
      if (!list.length) {
        const p = document.createElement('p');
        p.className = 'empty';
        p.textContent = 'Nada por ahora';
        container.appendChild(p);
        return;
      }
      list.slice(0, 3).forEach(item => {
        const card = document.createElement('div');
        card.className = 'subcard';

        const title = document.createElement('h3');
        title.textContent = item.titulo || '';
        card.appendChild(title);

        if (isAsistencia) {
          const loc = document.createElement('p');
          loc.innerHTML = '<i class="fa-solid fa-location-dot"></i> ' + (item.lugar || 'Sin lugar');
          card.appendChild(loc);
        }

        const now = Date.now() / 1000;
        const start = item.inicio_ts || 0;
        const end = item.fin_ts || 0;
        const label = now < start ? 'Comienza en: ' : 'Termina en: ';
        const target = now < start ? start : end;
        const time = document.createElement('p');
        time.innerHTML = '<i class="fa-regular fa-clock"></i> ' + label + '<span class="time"></span>';
        card.appendChild(time);
        const span = time.querySelector('.time');
        createCountdown(span, target || 0);

        container.appendChild(card);
      });
    }

    (async () => {
      const perfilData = await fetchJSON(backend + '/me/perfil') || {};
      const reglasData = await fetchJSON(backend + '/ajustes/perfil/reglas') || {};
      const votos = await fetchJSON(backend + '/votaciones') || [];
      const misVotos = await fetchJSON(backend + '/votaciones/mis') || [];
      const asistencias = await fetchJSON(backend + '/asistencia/actividades') || [];
      const misCheckins = await fetchJSON(backend + '/asistencia/mis-checkins') || [];

        const perfil = perfilData.perfil || {};
        document.getElementById('userName').textContent = perfil.nombre || '';
        document.getElementById('userNIU').textContent = perfil.niu || '';
        ['nombre','grupo','curso','niu'].forEach(f => {
          const el = document.getElementById(f + 'Input');
          if (el) el.value = perfil[f] || '';
        });
        const reglas = reglasData.reglas || {};
      const pendientes = [];
      for (const campo in reglas) {
        const conf = reglas[campo];
        if (conf.obligatorio && conf.activo && !perfil[campo]) {
          pendientes.push('Debes completar "' + campo + '" en tu perfil');
        }
      }

      const votosHechos = new Set((misVotos || []).map(v => v.votacion_id || v.id));
      const votosPendientes = (votos || []).filter(v => !votosHechos.has(v.id));
      if (votosPendientes.length) pendientes.push('Tienes ' + votosPendientes.length + ' votaciones pendientes');

        const now = Date.now() / 1000;
        const asistenciasPendientes = (asistencias || []).filter(a =>
          a.fin_ts > now && !(misCheckins || []).some(c => c.actividad_id === a.id && c.accion === 'in')
        );
        if (asistenciasPendientes.length) pendientes.push('Hay ' + asistenciasPendientes.length + ' registros de asistencia abiertos');

        document.getElementById('votacionesCount').textContent = votos.length;
        document.getElementById('asistenciaCount').textContent = asistencias.length;

        renderSubcards(votos, document.getElementById('votacionesList'), false);
        const sortedAsistencias = (asistencias || []).filter(a => a.fin_ts > now).sort((a,b)=>{
          const aStarted = now >= (a.inicio_ts || 0);
          const bStarted = now >= (b.inicio_ts || 0);
          if (aStarted !== bStarted) return aStarted ? -1 : 1;
          const aTarget = aStarted ? a.fin_ts : a.inicio_ts;
          const bTarget = bStarted ? b.fin_ts : b.inicio_ts;
          return aTarget - bTarget;
        });
        renderSubcards(sortedAsistencias, document.getElementById('asistenciasList'), true);

        const taskIcon = document.getElementById('tasksIcon');
        const taskPopup = document.getElementById('tasksPopup');
        const taskList = document.getElementById('taskList');
        const taskCount = document.getElementById('taskCount');

        if (pendientes.length) {
          taskCount.textContent = pendientes.length;
          pendientes.forEach(t => {
            const li = document.createElement('li');
            li.textContent = t;
            taskList.appendChild(li);
          });
        } else {
          taskCount.style.display = 'none';
          const li = document.createElement('li');
          li.textContent = 'No tienes tareas pendientes';
          taskList.appendChild(li);
        }

        taskIcon.addEventListener('click', () => taskPopup.classList.toggle('hidden'));
        document.addEventListener('click', (e) => {
          if (!taskPopup.contains(e.target) && !taskIcon.contains(e.target)) {
            taskPopup.classList.add('hidden');
          }
        });

        if (perfil.es_admin) {
          document.getElementById('adminModule').style.display = 'block';
        }

        const asistenciaModule = document.getElementById('asistenciasModule');
        asistenciaModule.addEventListener('click', () => {
          window.location.href = '/asistencias';
        });
      })();
  </script>
</body>
</html>
